#include <iostream>
#include <conio.h>
#include <math.h>

using namespace std;

float PowerA3(float a, float *b)
{
    *b = a * a * a;
    return(*b);
}

int Sign(float x)
{
    if (x == 0) return 0;
    else if (x < 0) return -1;
    else if (x > 0) return 1;
}

float RingS(float r1, float r2)
{
    float s = (3.14 * r1 * r1) - (3.14 * r2 * r2);
    return s;
}

int Quarter(float x, float y)
{
    if ((x > 0) && (y > 0)) return 1;
    else if ((x < 0) && (y > 0)) return 2;
    else if ((x < 0) && (y < 0)) return 3;
    else if ((x > 0) && (y < 0)) return 4;
}

float Fact2(int n)
{
    float s = 1;
    int k;
    if (n % 2 == 1)
    {
        k = 1;
        while (k <= n)
        {
            s *= k;
            k += 2;
        }
    }
    else
    {
        k = 2;
        while (k <= n)
        {
            s *= k;
            k += 2;
        }
    }
    return s;
}


int main()
{
    setlocale(0, "");
    int zadanie, i;

    cout << "Введите номер задания: ";
    cin >> zadanie;

    switch (zadanie) 
    {
    case 1: 
    {
        float a, b;
        cout << "Описать функцию PowerA3(A, B), вычисляющую третью степень числа A и возвращающую ее в переменной B (A — входной, B — выходной параметр;\nоба параметра являются вещественными).\nС помощью этой функции найти третьи степени пяти данных чисел.\n";
        for (i = 0; i < 5; i++)
        {
            cout << "\nВведите " << i + 1 << " число = ";
            cin >> a;
            cout << a << " в 3 степени = " << PowerA3(a, &b) << endl;
        }
        break; 
    }
    case 2: 
    {
        float a, b;
        cout << "Описать функцию Sign(X) целого типа, возвращающую для вещественного числа X следующие значения:\n-1, если X < 0; 0, если X = 0; 1, если X > 0.\nС помощью этой функции найти значение выражения Sign(A) + Sign(B) для данных вещественных чисел A и B.\n";
        cout << "\nВведите A = ";
        cin >> a;
        cout << "Введите B = ";
        cin >> b;
        cout << "\nSign(A) + Sign(B) = " << Sign(a) + Sign(b) << endl;
        break; 
    }
    case 3: 
    {
        float r1, r2;
        cout << "Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2).\nС ее помощью найти площади трех колец, для которых даны внешние и внутренние радиусы.\n";
        for (i = 0; i < 3; i++)
        {
            cout << "\n" << i + 1 << " кольцо\n" << "Введите R1 = ";
            cin >> r1;
            cout << "Введите R2 = ";
            cin >> r2;
            if (r1 > r2)
                cout << "Площадь кольца = " << RingS(r1, r2);
            else
                cout << "Неверные введеные значения";
        }
        break;
    }
    case 4: 
    {
        cout << "Описать функцию Quarter(x, y) целого типа, определяющую номер координатной четверти, в которой находится точка с ненулевыми вещественными координатами (x, y).\nС помощью этой функции найти номера координатных четвертей для трех точек с данными ненулевыми координатами.\n";
        for (i = 0; i < 3; i++)
        {
            float x, y;
            cout << "\n" << i + 1 << " координаты\n" << "Введите X: ";
            cin >> x;
            cout << "Введите Y: ";
            cin >> y;
            if ((x != 0) & (y != 0))
                cout << "\nКоординатная четверть = " << Quarter(x, y);
            else
                cout << "Неверные введеные значения";
        }
        break; 
    }
    case 5: 
    {
        int n;
        cout << " Описать функцию Fact2(N) вещественного типа, вычисляющую двойной факториал:\nN!!= 1·3·5·. ..·N, если N — нечетное;\nN!!= 2·4·6·. ..·N, если N — четное(N > 0 — параметр целого типа;\nвещественное возвращаемое значение используется для того,\nчтобы избежать целочисленного переполнения при больших значениях N).\n";
        cout << "\nВведите число: ";
        cin >> n;
        if (n > 0)
            cout << "Двойной факториал = " << Fact2(n) << endl;
        else
            cout << "Неверные введеные значения" << endl;
        break; 
    }
    }
    return 0;
}
